import { type NextPage } from "next";
import React from 'react';
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import AddCoffee from "../components/AddCoffee"
import CoffeeModal from "../components/CoffeeModal"
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Coffee-Mate</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-white">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-black sm:text-[5rem]">
            Coffee<span className="text-[hsl(15,42%,35%)]">Mateâ˜•</span>
          </h1>

          <div className="flex flex-col items-center gap-2">
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();
  const coffeeList = trpc.coffee.getAll.useQuery();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <button
        className="my-4 rounded-full bg-black/10 px-10 py-3 font-semibold text-black no-underline transition hover:bg-pink-500"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out ðŸ‘‹" : "Sign in"}
      </button>
      <p className="text-center text-2xl text-black">
        {sessionData && <span>Welcome back <b>{sessionData.user?.name}</b></span>}
      </p>
      <p>
        {secretMessage && <span>{secretMessage}</span>}
      </p>
      <div className="py-5">
        {sessionData && <AddCoffee />}
      </div>
      <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
        {sessionData && coffeeList?.data?.map((coffee, idx) => (
          <div key={idx}>
            <CoffeeModal data={coffee} />
          </div>
        ))}
      </div>
    </div>
  );
};
